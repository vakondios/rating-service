spring.application.name=ratingDto
ci2.srvhost = 192.168.31.206
#
## Swagger
springdoc.version=1
springdoc.api-docs.path=/api-docs
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.show-actuator=true
#
## Rest Server
server.port=8080
server.address=${ci2.srvhost}
server.ssl.enabled=false
server.ssl.key-store-type=PKCS12
server.ssl.key-store=C:/tls/keystore.p12
server.ssl.key-store-password=changeit
#
## Server connections configuration
server.tomcat.threads.max=200
server.tomcat.connection-timeout=5s
server.max-http-header-size=8KB
server.tomcat.max-swallow-size=2MB
server.tomcat.max-http-form-post-size=2MB
server.tomcat.basedir=tomcat
server.tomcat.accept-count=100
server.tomcat.background-processor-delay=10s
server.tomcat.max-connections=8192
server.tomcat.mbeanregistry.enabled=false
server.tomcat.processor-cache=200
server.tomcat.redirect-context-root=true
server.tomcat.remoteip.host-header=X-Forwarded-Host
server.tomcat.remoteip.port-header=X-Forwarded-Port
server.tomcat.resource.allow-caching=true
server.tomcat.threads.min-spare=10
server.compression.enabled=false
server.http2.enabled=false
server.servlet.session.timeout=30m
#
## Access logs configuration
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.directory=logs
server.tomcat.accesslog.file-date-format=yyyy-MM-dd
server.tomcat.accesslog.prefix=access_log
server.tomcat.accesslog.suffix=.log
server.tomcat.accesslog.pattern=common
server.tomcat.accesslog.request-attributes-enabled=true
server.tomcat.accesslog.buffered=true
server.tomcat.accesslog.check-exists=false
server.tomcat.accesslog.ipv6-canonical=false
server.tomcat.accesslog.max-days=-1
server.tomcat.accesslog.rename-on-rotate=true
server.tomcat.accesslog.rotate=true
#
## Eureka
eureka.client.enabled=false
eureka.instance.leaseRenewalIntervalInSeconds=1
eureka.instance.leaseExpirationDurationInSeconds=2
eureka.client.serviceUrl.defaultZone= http://${ci2.srvhost}:8761/eureka/
eureka.instance.hostname=${ci2.srvhost}
spring.cloud.client.hostname=${ci2.srvhost}
#
## Configuring info endpoint (http://localhost:8090/actuator/info)
info.app.name=Rating
info.app.description=Rating Service
info.app.version=1.0.0
info.java-vendor=${java.specification.vendor}
info.owner=Antonis Vakondios
#
## Security for the rest
app.security.username=system@system.com
app.security.password=P@risL0nd0n
app.security.uri-auth-whitelist=/actuator/**, /api-docs/**
#
## Caffeine Cache Configuration for the Audit/RatingResults
app.caffeine.cache.initialCapacity=2
app.caffeine.cache.maximumSize =5000
app.caffeine.cache.expireInSeconds=600
#
## Events Task Executor configuration
# Default Values CorePoolSize=2,  MaxPoolSize=5, QueueCapacity=250
events-task-executor.CorePoolSize=1
events-task-executor.MaxPoolSize=2
events-task-executor.QueueCapacity=10
#
## HIKARI
spring.datasource.hikari.connectionTimeout=30000
spring.datasource.hikari.idleTimeout=600000
spring.datasource.hikari.maxLifetime=1800000
spring.datasource.hikari.maximum-pool-size=5
#
## Postgresql configuration
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/ratingservice
spring.datasource.username=postgres
spring.datasource.password=12345
spring.datasource.initialization-mode=always
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format-sql=true
spring.jpa.properties.hibernate.generate_statistics=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
#
## Logging Level
## Logging Level
logging.file.path=./logs
logging.file.name=${logging.file.path}/mailer-service.log
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
#logging.pattern.console=%highlight{%d{HH:mm:ss.SSS} %T %-6level %-4.4L %-60.40c{1} %-40.40M - %msg%n}
logging.level.root=ERROR
logging.level.com.netflix=ERROR
logging.level.gr.*=DEBUG
logging.level.org.hibernate=ERROR
logging.level.org.springframework=ERROR
logging.level.org.hibernate.SQL=ERROR
#
## Overall SQL query
database.sql.rating.delete=Delete from ratings where created_at < (select CAST(extract(epoch from (NOW() - INTERVAL '100 DAY')) * 1000 as int8))
database.sql.rating.overall=SELECT to_char((Sum(total_rating)/count(*) / 20), '0.00') as overall_result, rated_entity from ( SELECT (100 * (((100 - DATE_PART('day', NOW()::timestamp - (SELECT to_timestamp(created_at / 1000) AT TIME ZONE 'UTC'))) / 100)) * ((1 - ((5 - given_rating) / 5))) * ((select case when (LENGTH(rater) = 0 or rater is null) then 0.1 else 1 end))) as total_rating, rated_entity from ratings where created_at >= (select CAST(extract(epoch from (NOW() - INTERVAL '100 DAY')) * 1000 as int8)) and rated_entity = :rated_entity) as results group by rated_entity
#
## Scheduler
scheduler.pool-size=10
scheduler.db-cleanup-scheduler-period=1000